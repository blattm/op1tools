#!/bin/bash


######### note:
#ejecting might require script to be run with sudo. alternatively add user to disk group:
#sudo usermod -a -G disk YourUserName


#####################################  usb  #################################
isDevMounted () { findmnt -rno SOURCE        "$1" >/dev/null;} #device only
getMountpoint () { findmnt -nro TARGET -S "$1";}
#!/bin/bash

#### info:
# run as root or ad user to group diks:
#sudo usermod -a -G disk manuel

############ begin usb ##################

getMountpoint() {
    if (($# >0)); then
        findmnt -rno TARGET -S "$1"
    else
        return 2
    fi
}
isDevMounted () { findmnt -rno SOURCE "$1" > /dev/null;}
isConnected () { udisksctl status | grep -qs "Teenage OP-1";}
getDev() { #assumes that OP-1 is connected
    if ! usblongname=$(udisksctl status | grep "Teenage OP-1");then
        return 2
    fi
    read -ra array <<<"$usblongname"
    local usbname="${array[-1]}"
    echo "/dev/$usbname"
    return 0
}

getFolder() { #assumes that OP-1 is connected and mounted
    local devname=$(getDev)
    getMountpoint "$devname"
}


getFolder_Mount() { #assumes that OP-1 is connected and mounted
    local devname=$(getDev)
    if [ $? -ne 0 ]; then
        return 2
    fi
    if ! isDevMounted $devname; then
        _mount "$devname" > /dev/null
    fi
    getMountpoint "$devname"
}

_mount() { #takes devname
    local devname=$1
    if isDevMounted "$devname"; then
        echo "Did not mount OP-1: already mounted"
        return 3
    fi
    udisksctl mount -b "$devname"
}

mount_op (){
    if ! isConnected; then
        echo "Could not mount OP-1: not connected"
        return 2
    fi
    local devname=$(getDev)
    _mount "$devname"
}


_eject(){ #takes devname
    local devname=$1
    sync
    if ! isDevMounted $devname; then
        udisksctl unmount -b $devname
    fi
    eject $devname
    return
}

eject_op(){ #takes devname
    if ! isConnected; then
        echo "Could not eject OP-1: not connected"
        return 2
    fi
    local devname=$(getDev)
    _eject $devname
    while isConnected; do
        sleep .5;
    done;
    echo "Ejected OP-1"
}

usb_status () {
    if ! isConnected; then
        echo "OP-1 not connected"
        return 2
    fi
    local devname=$(getDev)
    if ! isDevMounted "$devname"; then
        echo "OP-1 connected, but not mounted"
        return 1
    fi
    echo OP-1 connected and mounted at $(getMountpoint $devname)
    return 0

}

wait_for_op (){
    echo Wait for OP-1
    while ! isConnected; do
        sleep .5;
    done;
}

wait_and_mount_op(){
    wait_for_op
    mount_op
}


wait_mount_get_folder(){
    wait_and_mount_op > /dev/null
    getFolder
}


#####################################  end usb  #################################
##############################  start label gen  #################################

backup_user(){ #gets folder name
    op=$(getFolder)
    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 9
    fi

    if (($# <1)); then
        bu="backup_user_synth"
    else
        bu="$1"
    fi
    if ! mkdir "$bu" 2>/dev/null; then
        echo "Could not make fresh folder for backup"
        return 8
    fi

    cp -a "$op/synth/user/." "$bu"

    echo "Made user synth Backup"
    return 0
}


backup_restore(){ #gets folder name
    op=$(getFolder_Mount)
    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 8
    fi
    if (($# <1)); then
        bu="backup_user_synth"
    else
        bu="$1"
    fi

    cp -a  "$bu/." "$op/synth/user/"
    echo "Restored user synth Backup"
    #rmdir "$bu"
}

label_once() { # parameters: 1_in 2_in ... 8_in 1_out 2_out ... 8_out
    if (( $# % 2 )); then
        echo odd number of parameters
        return 5
    fi
    if (( $# > 16 )); then
        echo to many parameters
        return 6
    fi
    if (( $# < 1 )); then
        echo no parameters given
        return 7
    fi

    op=$(getFolder_Mount)
    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 9
    fi

    local num_slots=$(($# / 2))

    for ((i = 1; i <= $num_slots; i++ )); do
        rm "$op"/synth/user/"$i".aif
        cp "${!i}" "$op"/synth/user/"$i".aif
    done


    eject_op
    echo "Please wait until data is processed, press any key on OP-1 and put OP-1 in disk-mode again"
    op=$(wait_mount_get_folder)

    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 9
    fi

    for ((i = 1; i <= $num_slots; i++ )); do
        j=$((i + num_slots))
        mkdir -p "$(dirname "${!j}")"
        cp "$op"/synth/user/"$i".aif "${!j}"
    done

    #rm -r "$op"/synth/user/*

}

label_multi() { # parameters: 1_in 1_out 2_in 2_out ...... n_in n_out
    declare -a inlist
    declare -a outlist
    inlist=()
    outlist=()
    (( rounds_left=($#+16-1)/16))
    echo "$rounds_left" rounds left
    echo "Please connect OP-1 and put it in disk-mode"
    wait_and_mount_op
    while [ -n "$2" ]; do
        if (( ${#inlist[@]} < 8 )); then
            inlist+=( "$1" )
            outlist+=( "$2" )
            shift
            shift
        else
            #(( rounds_left=($#+16-1)/16 +1))
            #echo "$rounds_left" rounds left
            label_once "${inlist[@]}" "${outlist[@]}"
            (( rounds_left=($#+16-1)/16 ))
            echo "$rounds_left" rounds left
            inlist=()
            outlist=()
        fi
    done
    if (( ${#inlist[@]} > 0 )); then
        #echo "1 round left"
        label_once "${inlist[@]}" "${outlist[@]}"
        echo Done
    fi

}

label_folder() {
    if (( $# <1 )); then
        echo not enough arguments given
        return 10
    fi
    if (( $# <2 )); then
        local folder1_full=$(readlink -f "$1")
        folder2="$folder1_full"_labeled
    else
        folder2="$2"
    fi
    mkdir -p "$folder2"
    parameters=()
    pushd "$1" > /dev/null
    IFS_backup="$IFS"
    IFS=$'\n' #change bash variable separator
    for f in $(find . -name '*.aif'); do
        if [ ! -f "$folder2${f:1}" ]; then #only if target non-existant yet
            if $( grep -qs '"type":"sampler"}' "$f"); then
                mkdir -p "$(dirname "$folder2${f:1}")"
                cp "$f" "$folder2${f:1}"
            else
                parameters+=( "$1${f:1}" "$folder2${f:1}" )
            fi
        fi
    done
    IFS="$IFS_backup"
    popd > /dev/null
    label_multi "${parameters[@]}"
    #label_multi ${parameters[@]}

    #pushd "$2" > /dev/null
    #popd > /dev/null
}



backup_op() {
    op=$(getFolder_Mount)
    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 9
    fi

    dt=$(date '+%Y-%m-%d_%H:%M:%S');
    if (($# <1)); then
        folder="$dt"
    else
        folder="$1/$dt"
    fi

    #mkdir "$folder"
    cp -r "$op" "$folder"
    echo backup to $dt

}

op1_count() {
    op=$(getFolder_Mount)
    if [ $? -ne 0 ]; then
        echo "Could not get OP1 Folder"
        return 9
    fi
    synandsamp=$( find "$op"/synth/ -type f | wc -l )
    drum=$( find "$op"/drum/ -type f | wc -l )
    samp=$( grep '"type":"sampler"}' "$op"/synth/*/* | wc -l)
    syn=$(( $synandsamp-$samp ))

    echo -e "Synthesizer patches \t$syn / 100"
    echo -e "Sampler pathes \t\t$samp / 40"
    echo -e "Drum patches \t\t$drum / 40"
}



############################## end label gen  #################################

#usb_status
#backup_user "$@"
#label_folder "$@"
#backup_restore "$@"

#usb_status
#eject_op
#exit
#wait_and_mount_op
#backup_user|| { echo 'backup failed. stopping script' ; exit 1; }
#label_once
#sleep 1
#backup_restore
#eject_op
#usb_status

case "$1" in
    status)
        shift
        usb_status "$@"
        exit
        ;;
    eject)
        shift
        eject_op "$@"
        exit
        ;;
    mount)
        shift
        mount_op "$@"
        exit
        ;;
    label)
        shift
        label_folder "$@"
        exit
        ;;
    backup-user-synth)
        shift
        backup_user "$@"
        exit
        ;;
    restore-user-synth)
        shift
        backup_restore "$@"
        exit
        ;;
    wait)
        shift
        wait_for_op "$@"
        exit
        ;;
    wait-mount)
        shift
        wait_and_mount_op "$@"
        exit
        ;;
    backup)
        shift
        backup_op "$@"
        exit
        ;;
    count)
        shift
        op1_count "$@"
        exit
        ;;
    folder)
        shift
        getFolder "$@"
        exit
        ;;
    folder-mount)
        shift
        getFolder_Mount "$@"
        exit
        ;;
    *)
        echo usage: "$0" command ...
        echo
        echo commands:
        
        echo -e "  count \t\t\t Counts how many patches are on your OP-1 and how close you are to the limits"
        
        echo -e "  label infolder [outfolder] \t Uses the OP-1 to add sound samples to all"
        echo -e "   \t\t\t\t OP-1 patches in infolder. If no outfolder is given, results are"
        echo -e "   \t\t\t\t saved in infolder_labeled. WARNING: THIS ACTION WILL OVERWRITE YOUR"
        echo -e "   \t\t\t\t synth/user FOLDER ON THE OP-1. Please use backup-user-synth and "
        echo -e "   \t\t\t\t restore-user-synth before resp. after using this command!"
        echo -e "   \t\t\t\t You have to run the command with sudo (not recommended) or add yourself"
        echo -e "   \t\t\t\t to the disk group, via"
        echo -e "   \t\t\t\t sudo usermod -a -G disk YourUserName"
        
        echo -e "  backup-user-synth [folder] \t Backups the synth/user to the specified folder. "
        echo -e "   \t\t\t\t If no folder is given, the backup will be placed in backup_user_synth"

        echo -e "  restore-user-synth [folder] \t Restores synth/user from the specified folder. "
        echo -e "   \t\t\t\t If no folder is given, the backup will be taken from backup_user_synth"
        
        echo -e "  backup [folder] \t\t Backups the whole OP-1 to the specified folder. "
        echo -e "   \t\t\t\t If no folder is given, the backup will be placed in current folder"
        
        echo -e "  status \t\t\t Returns the USB connection and mount status of the OP-1"

        echo -e "  mount \t\t\t Mounts the OP-1"

        echo -e "  eject \t\t\t Ejects / savely removes the OP-1"
        echo -e "   \t\t\t\t You have to run the command with sudo (not recommended) or add yourself"
        echo -e "   \t\t\t\t to the disk group, via"
        echo -e "   \t\t\t\t sudo usermod -a -G disk YourUserName"

        echo -e "  wait \t\t\t\t Wait until the OP-1 is connected via usb."

        echo -e "  wait-mount \t\t\t Wait until the OP-1 is connected via usb. Then mount the OP-1"

        echo -e "  folder \t\t\t Return the OP-1's folder if its mounted."

        echo -e "  folder-mount \t\t\t Return the OP-1's folder. Mount the OP-1 if necessary."
        exit 255
        ;;
esac

